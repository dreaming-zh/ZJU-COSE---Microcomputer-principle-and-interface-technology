C51 COMPILER V9.60.0.0   ____ADC                                                           06/01/2022 14:54:11 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE ____ADC
OBJECT MODULE PLACED IN .\Objects\读取ADC.obj
COMPILER INVOKED BY: D:\Keil\C51\BIN\C51.EXE 读取ADC.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\读取
                    -ADC.lst) TABS(2) OBJECT(.\Objects\读取ADC.obj)

line level    source

   1          /*---------------------------------------------------------------------*/
   2          /* --- STC MCU International Limited ----------------------------------*/
   3          /* --- STC 1T Series MCU Demo Programme -------------------------------*/
   4          /* --- Mobile: (86)13922805190 ----------------------------------------*/
   5          /* --- Fax: 86-0513-55012956,55012947,55012969 ------------------------*/
   6          /* --- Tel: 86-0513-55012928,55012929,55012966 ------------------------*/
   7          /* --- Web: www.GXWMCU.com --------------------------------------------*/
   8          /* --- QQ:  800003751 -------------------------------------------------*/
   9          /* 如果要在程序中使用此代码,请在程序中注明使用了宏晶科技的资料及程序   */
  10          /*---------------------------------------------------------------------*/
  11          
  12          
  13          /*************  本程序功能说明  **************
  14          
  15          用STC的MCU的IO方式控制74HC595驱动8位数码管。
  16          
  17          显示效果为: 数码时钟.
  18          
  19          使用Timer0的16位自动重装来产生1ms节拍,程序运行于这个节拍下, 用户修改MCU主时钟频率时,自动定时于1ms.
  20          
  21          左边4位LED显示时间(小时,分钟), 右边最后两位显示按键值.
  22          
  23          ADC按键键码为1~16.
  24          
  25          按键只支持单键按下, 不支持多键同时按下, 那样将会有不可预知的结果.
  26          
  27          键按下超过1秒后,将以10键/秒的速度提供重键输出. 用户只需要检测KeyCode是否非0来判断键是否按下.
  28          
  29          调整时间键:
  30          键码1: 小时+.
  31          键码2: 小时-.
  32          键码3: 分钟+.
  33          键码4: 分钟-.
  34          
  35          
  36          ******************************************/
  37          
  38          #define   MAIN_Fosc   22118400L //定义主时钟
  39          
  40          #include  "STC15Fxxxx.H"
  41          
  42          
  43          #define Timer0_Reload (65536UL -(MAIN_Fosc / 1000))   //Timer 0 中断频率, 1000次/秒
  44          
  45          #define DIS_DOT   0x20
  46          #define DIS_BLACK 0x10
  47          #define DIS_    0x11
  48          
  49          
  50          
  51          
  52          u8 code t_display[]={           //标准字库
  53          //   0    1    2    3    4    5    6    7    8    9    A    B    C    D    E    F
  54            0x3F,0x06,0x5B,0x4F,0x66,0x6D,0x7D,0x07,0x7F,0x6F,0x77,0x7C,0x39,0x5E,0x79,0x71,
C51 COMPILER V9.60.0.0   ____ADC                                                           06/01/2022 14:54:11 PAGE 2   

  55          //black  -     H    J  K    L    N  o   P  U     t    G    Q    r   M    y
  56            0x00,0x40,0x76,0x1E,0x70,0x38,0x37,0x5C,0x73,0x3E,0x78,0x3d,0x67,0x50,0x37,0x6e,
  57            0xBF,0x86,0xDB,0xCF,0xE6,0xED,0xFD,0x87,0xFF,0xEF,0x46};  //0. 1. 2. 3. 4. 5. 6. 7. 8. 9. -1
  58          
  59          u8 code T_COM[]={0x01,0x02,0x04,0x08,0x10,0x20,0x40,0x80};    //位码
  60          
  61          
  62          sbit  P_HC595_SER   = P4^0; //pin 14  SER   data input
  63          sbit  P_HC595_RCLK  = P5^4; //pin 12  RCLk  store (latch) clock
  64          sbit  P_HC595_SRCLK = P4^3; //pin 11  SRCLK Shift data clock
  65          
  66          
  67          u8  LED8[8];    //显示缓冲
  68          u8  display_index;  //显示位索引
  69          bit B_1ms;      //1ms标志
  70          
  71          u8  ADC_KeyState,ADC_KeyState1,ADC_KeyState2,ADC_KeyState3; //键状态
  72          u8  ADC_KeyHoldCnt; //键按下计时
  73          u8  KeyCode;  //给用户使用的键码, 1~16有效
  74          u8  cnt10ms;
  75          
  76          u8  hour,minute,second; //RTC变量
  77          u16 msecond;
  78          
  79          void  CalculateAdcKey(u16 adc);
  80          u16   Get_ADC10bitResult(u8 channel); //channel = 0~7
  81          void  DisplayRTC(void);
  82          void  RTC(void);
  83          
  84          
  85          
  86          
  87          /**********************************************/
  88          void main(void)
  89          {
  90   1        u8  i;
  91   1        u16 j;
  92   1      
  93   1        P0M1 = 0; P0M0 = 0; //设置为准双向口
  94   1        P1M1 = 0; P1M0 = 0; //设置为准双向口
  95   1        P2M1 = 0; P2M0 = 0; //设置为准双向口
  96   1        P3M1 = 0; P3M0 = 0; //设置为准双向口
  97   1        P4M1 = 0; P4M0 = 0; //设置为准双向口
  98   1        P5M1 = 0; P5M0 = 0; //设置为准双向口
  99   1        P6M1 = 0; P6M0 = 0; //设置为准双向口
 100   1        P7M1 = 0; P7M0 = 0; //设置为准双向口
 101   1        
 102   1        display_index = 0;
 103   1        P1ASF = 0x10;   //P1.4做ADC
 104   1        ADC_CONTR = 0xE0; //90T, ADC power on
 105   1        
 106   1        AUXR = 0x80;  //Timer0 set as 1T, 16 bits timer auto-reload, 
 107   1        TH0 = (u8)(Timer0_Reload / 256);
 108   1        TL0 = (u8)(Timer0_Reload % 256);
 109   1        ET0 = 1;  //Timer0 interrupt enable
 110   1        TR0 = 1;  //Tiner0 run
 111   1        EA = 1;   //打开总中断
 112   1        
 113   1        for(i=0; i<8; i++)  LED8[i] = 0x10; //上电消隐
 114   1      
 115   1        hour   = 12;  //初始化时间值
 116   1        minute = 0;
C51 COMPILER V9.60.0.0   ____ADC                                                           06/01/2022 14:54:11 PAGE 3   

 117   1        second = 0;
 118   1        DisplayRTC();
 119   1      
 120   1        ADC_KeyState  = 0;
 121   1        ADC_KeyState1 = 0;
 122   1        ADC_KeyState2 = 0;
 123   1        ADC_KeyState3 = 0;  //键状态
 124   1        ADC_KeyHoldCnt = 0; //键按下计时
 125   1        KeyCode = 0;  //给用户使用的键码, 1~16有效
 126   1        cnt10ms = 0;
 127   1      
 128   1        while(1)
 129   1        {
 130   2          if(B_1ms) //1ms到
 131   2          {
 132   3            B_1ms = 0;
 133   3            if(++msecond >= 1000) //1秒到
 134   3            {
 135   4              msecond = 0;
 136   4              RTC();
 137   4              DisplayRTC();
 138   4            }
 139   3            if(msecond == 500)  DisplayRTC(); //小时后的小数点做秒闪
 140   3      
 141   3            if(++cnt10ms >= 10) //10ms读一次ADC
 142   3            {
 143   4              cnt10ms = 0;
 144   4              j = Get_ADC10bitResult(4);  //参数0~7,查询方式做一次ADC, 返回值就是结果, == 1024 为错误
 145   4              if(j < 1024)  CalculateAdcKey(j); //计算按键
 146   4                  
 147   4            }
 148   3      
 149   3            if(KeyCode > 0)   //有键按下
 150   3            {
 151   4              
 152   4                LED8[7] = KeyCode-1;  //显示键码
 153   4                KeyCode = 0;
 154   4            }
 155   3      
 156   3          }
 157   2        }
 158   1      } 
 159          /**********************************************/
 160          
 161          
 162          
 163          /********************** 显示时钟函数 ************************/
 164          void  DisplayRTC(void)
 165          {
 166   1        if(hour >= 10)  LED8[0] = DIS_BLACK;
 167   1        else      LED8[0] = DIS_BLACK;
 168   1        LED8[1] = DIS_BLACK;
 169   1        LED8[2] = DIS_BLACK;
 170   1        LED8[3] = DIS_BLACK;
 171   1        if(msecond >= 500)    LED8[1] |= DIS_BLACK; //小时后的小数点做秒闪
 172   1      }
 173          
 174          /********************** RTC演示函数 ************************/
 175          void  RTC(void)
 176          {
 177   1        if(++second >= 60)
 178   1        {
C51 COMPILER V9.60.0.0   ____ADC                                                           06/01/2022 14:54:11 PAGE 4   

 179   2          second = 0;
 180   2          if(++minute >= 60)
 181   2          {
 182   3            minute = 0;
 183   3            if(++hour >= 24)  hour = 0;
 184   3          }
 185   2        }
 186   1      }
 187          
 188          
 189          //========================================================================
 190          // 函数: u16  Get_ADC10bitResult(u8 channel)
 191          // 描述: 查询法读一次ADC结果.
 192          // 参数: channel: 选择要转换的ADC.
 193          // 返回: 10位ADC结果.
 194          // 版本: V1.0, 2012-10-22
 195          //========================================================================
 196          u16 Get_ADC10bitResult(u8 channel)  //channel = 0~7
 197          {
 198   1        ADC_RES = 0;
 199   1        ADC_RESL = 0;
 200   1      
 201   1        ADC_CONTR = (ADC_CONTR & 0xe0) | 0x08 | channel;  //start the ADC
 202   1        NOP(4);
 203   1      
 204   1        while((ADC_CONTR & 0x10) == 0)  ; //wait for ADC finish
 205   1        ADC_CONTR &= ~0x10;   //清除ADC结束标志
 206   1        return  (((u16)ADC_RES << 2) | (ADC_RESL & 3));
 207   1      }
 208          
 209          /***************** ADC键盘计算键码 *****************************
 210          电路和软件算法设计: Coody
 211          本ADC键盘方案在很多实际产品设计中, 验证了其稳定可靠, 即使按键使用导电膜,都很可靠.
 212          16个键,理论上各个键对应的ADC值为 (1024 / 16) * k = 64 * k, k = 1 ~ 16, 特别的, k=16时,对应的ADC值是1023.
 213          但是实际会有偏差,则判断时限制这个偏差, ADC_OFFSET为+-偏差, 则ADC值在 (64*k-ADC_OFFSET) 与 (64*k+ADC_OFFSET
             -)之间为键有效.
 214          间隔一定的时间,就采样一次ADC,比如10ms.
 215          为了避免偶然的ADC值误判, 或者避免ADC在上升或下降时误判, 使用连续3次ADC值均在偏差范围内时, ADC值才认为有效.
 216          以上算法, 能保证读键非常可靠.
 217          **********************************************/
 218          #define ADC_OFFSET  16
 219          void  CalculateAdcKey(u16 adc)
 220          {
 221   1        u8  i;
 222   1        u16 j;
 223   1        
 224   1        if(adc < (64-ADC_OFFSET))
 225   1        {
 226   2          ADC_KeyState = 0; //键状态归0
 227   2          ADC_KeyHoldCnt = 0;
 228   2        }
 229   1        j = 64;
 230   1        for(i=1; i<=16; i++)
 231   1        {
 232   2          if((adc >= (j - ADC_OFFSET)) && (adc <= (j + ADC_OFFSET)))  break;  //判断是否在偏差范围内
 233   2          j += 64;
 234   2        }
 235   1        ADC_KeyState3 = ADC_KeyState2;
 236   1        ADC_KeyState2 = ADC_KeyState1;
 237   1        if(i > 16)  ADC_KeyState1 = 0;  //键无效
 238   1        else            //键有效
 239   1        {
C51 COMPILER V9.60.0.0   ____ADC                                                           06/01/2022 14:54:11 PAGE 5   

 240   2          ADC_KeyState1 = i;
 241   2          if((ADC_KeyState3 == ADC_KeyState2) && (ADC_KeyState2 == ADC_KeyState1) &&
 242   2             (ADC_KeyState3 > 0) && (ADC_KeyState2 > 0) && (ADC_KeyState1 > 0))
 243   2          {
 244   3            if(ADC_KeyState == 0) //第一次检测到
 245   3            {
 246   4              KeyCode  = i; //保存键码
 247   4              ADC_KeyState = i; //保存键状态
 248   4              ADC_KeyHoldCnt = 0;
 249   4            }
 250   3            if(ADC_KeyState == i) //连续检测到同一键按着
 251   3            {
 252   4              if(++ADC_KeyHoldCnt >= 100) //按下1秒后,以10次每秒的速度Repeat Key
 253   4              {
 254   5                ADC_KeyHoldCnt = 90;
 255   5                KeyCode  = i; //保存键码
 256   5              }
 257   4            }
 258   3            else  ADC_KeyHoldCnt = 0; //按下时间计数归0
 259   3          }
 260   2        }
 261   1      }
 262          
 263          
 264          /**************** 向HC595发送一个字节函数 ******************/
 265          void Send_595(u8 dat)
 266          {   
 267   1        u8  i;
 268   1        for(i=0; i<8; i++)
 269   1        {
 270   2          dat <<= 1;
 271   2          P_HC595_SER   = CY;
 272   2          P_HC595_SRCLK = 1;
 273   2          P_HC595_SRCLK = 0;
 274   2        }
 275   1      }
 276          
 277          /********************** 显示扫描函数 ************************/
 278          void DisplayScan(void)
 279          { 
 280   1        Send_595(~T_COM[display_index]);        //输出位码
 281   1        Send_595(t_display[LED8[display_index]]); //输出段码
 282   1      
 283   1        P_HC595_RCLK = 1;
 284   1        P_HC595_RCLK = 0;             //锁存输出数据
 285   1        if(++display_index >= 8)  display_index = 0;  //8位结束回0
 286   1      }
 287          
 288          
 289          /********************** Timer0 1ms中断函数 ************************/
 290          void timer0 (void) interrupt TIMER0_VECTOR
 291          {
 292   1        DisplayScan();  //1ms扫描显示一位
 293   1        B_1ms = 1;    //1ms标志
 294   1      }
 295          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    619    ----
   CONSTANT SIZE    =     51    ----
   XDATA SIZE       =   ----    ----
C51 COMPILER V9.60.0.0   ____ADC                                                           06/01/2022 14:54:11 PAGE 6   

   PDATA SIZE       =   ----    ----
   DATA SIZE        =     21    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
